name: publish_assets_icc

on:
  release:
    types: [created]

jobs:
  build:
    env:
      OUTPUT_DIR: edax_runner-bin
      PUBLISH_DIR: dst
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            edax-runner_bin_name: edax_runner-linux
            edax_build_command: make build ARCH=x64-modern COMP=icc OS=linux
            edax_bin_name: lEdax-x64-modern
            intel_components_install_script: oneapi-ci/scripts/install_linux.sh
            intel_cpp_components: intel.oneapi.lin.dpcpp-cpp-compiler-pro
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17427/l_HPCKit_p_2021.1.0.2684_offline.sh
            intel_cpp_components_cache_path: /opt/intel/oneapi/compiler
            prepare_command_for_cache_restore_of_cpp_components: ''
          - os: windows-latest
            edax-runner_bin_name: edax_runner-windows.exe
            edax_build_command: make build ARCH=x64 COMP=icc OS=windows
            edax_bin_name: wEdax-x64.exe
            intel_components_install_script: oneapi-ci/scripts/install_windows.bat
            intel_cpp_components: intel.oneapi.win.cpp-compiler
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17392/w_HPCKit_p_2021.1.0.2682_offline.exe
            intel_cpp_components_cache_path: C:\Program Files (x86)\Intel\oneAPI\compiler
            prepare_command_for_cache_restore_of_cpp_components: ''
          - os: macOS-latest
            edax-runner_bin_name: edax_runner-mac
            edax_build_command: make build ARCH=x64-modern COMP=icc OS=osx
            edax_bin_name: mEdax
            intel_components_install_script: oneapi-ci/scripts/install_macos.sh
            intel_cpp_components: intel.oneapi.mac.cpp-compiler
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
            intel_cpp_components_cache_path: /opt/intel/oneapi
            prepare_command_for_cache_restore_of_cpp_components: sudo mkdir -p /opt/intel && sudo chown $USER /opt/intel

    steps:
      - uses: actions/checkout@v2

      - uses: cedx/setup-dart@v2
        with:
            architecture: x64
            release-channel: beta
      - name: install dependencies
        run: pub get

      - name: cache edax-reversi
        id: cache-edax-reversi
        uses: actions/cache@v2
        with:
          path: edax-reversi
          key: ${{ runner.os }}-edax-reversi-${{ hashFiles('scripts/build_edax.sh') }}

      # setup Intel Compiler icc
      - uses: actions/checkout@v2
        with:
          repository: oneapi-src/oneapi-ci
          path: oneapi-ci
      - name: prepare for cache restore
        run: ${{ matrix.prepare_command_for_cache_restore_of_cpp_components }}
      - name: cache intel components
        id: cache-intel-components
        uses: actions/cache@v2
        with:
          path: ${{ matrix.intel_cpp_components_cache_path }}
          key: install-${{ matrix.hrckit_url }}-${{ matrix.intel_cpp_components }}
      - name: install
        if: steps.cache-intel-components.outputs.cache-hit != 'true'
        run: ${{ matrix.intel_components_install_script }} ${{ matrix.hrckit_url }} ${{ matrix.intel_cpp_components }}

      - name: build edax-reversi
        env:
          dst: ${{ env.OUTPUT_DIR }}
          bin_name: ${{ matrix.edax-runner_bin_name }}
          edax_build_command: ${{ matrix.edax_build_command }}
          edax_bin_name: ${{ matrix.edax_bin_name }}
        run: sh scripts/build_edax.sh

      - name: build edax-runner
        run: dart2native bin/edax_runner.dart -v -o ${{ env.OUTPUT_DIR }}/${{ matrix.edax-runner_bin_name }}

      - name: output build info
        run: |-
          touch env.txt
          icc --dumpversion >> env.txt
          cp env.txt ${{ env.OUTPUT_DIR }}/env.txt

      - name: zip files (Windows)
        if: runner.os == 'Windows'
        run: mkdir -p ${{ env.PUBLISH_DIR }} && powershell Compress-Archive -Path ${{ env.OUTPUT_DIR }} -DestinationPath ${{ env.PUBLISH_DIR }}/${{ runner.os }}.zip
      - name: zip files (Linux, MacOS)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: mkdir -p ${{ env.PUBLISH_DIR }} && zip -r ${{ env.PUBLISH_DIR }}/${{ runner.os }}.zip ${{ env.OUTPUT_DIR }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.PUBLISH_DIR }}/${{ runner.os }}.zip
          asset_name: edax_runner_${{ runner.os }}_icc.zip
          asset_content_type: application/zip

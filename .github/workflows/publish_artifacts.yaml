name: publish_artifacts

on:
  push:
    branches: [ main ]
    paths: ['bin/**', 'lib/**', '.github/workflows/publish_artifacts.yaml', 'pubspec.*', 'resources/edax.ini', 'resources/learning_list.txt', 'scripts/build_edax.sh']
  pull_request:
    types: [opened, synchronize]
    paths: ['.github/workflows/publish_artifacts.yaml', 'scripts/build_edax.sh']

jobs:
  build:
    env: # See: https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idenv
      OUTPUT_DIR: edax_runner-bin
      cache_version: -3
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macOS-latest]
        include: # See: https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#using-environment-variables-in-a-matrix
          # NOTE: Intel Components variables are based on https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
          # See: https://github.com/oneapi-src/oneapi-ci/issues/31
          - os: ubuntu-20.04
            edax-runner_bin_name: edax_runner-linux
            edax_build_command: make build ARCH=x64-modern COMP=icc OS=linux
            edax_bin_name: lEdax-x64-modern
            intel_components_install_script: oneapi-ci/scripts/install_linux.sh
            intel_components_setup_script: |- # https://github.com/oneapi-src/oneapi-ci/blob/master/scripts/build_linux.sh
              LATEST_VERSION=$(ls -1 /opt/intel/oneapi/compiler/ | grep -v latest | sort | tail -1)
              source /opt/intel/oneapi/compiler/"$LATEST_VERSION"/env/vars.sh
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17427/l_HPCKit_p_2021.1.0.2684_offline.sh
            intel_cpp_components: intel.oneapi.lin.dpcpp-cpp-compiler-pro
            intel_cpp_components_cache_path: /opt/intel/oneapi/compiler
            prepare_command_for_cache_restore_of_cpp_components: ''
          - os: windows-latest
            edax-runner_bin_name: edax_runner-windows.exe
            edax_build_command: make build ARCH=x64 COMP=icc OS=windows
            edax_bin_name: wEdax-x64.exe
            intel_components_install_script: oneapi-ci/scripts/install_windows.bat
            intel_components_setup_script: |- # https://github.com/oneapi-src/oneapi-ci/blob/master/scripts/build_windows.bat
              for /f "tokens=* usebackq" %f in (`dir /b C:\Program Files (x86)\Intel\oneAPI\compiler\ ^| findstr /V latest ^| sort`) do @set "LATEST_VERSION=%f"
              echo "aaa"
              @call "C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\env\vars.bat"
            intel_cpp_components: intel.oneapi.win.cpp-compiler
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17392/w_HPCKit_p_2021.1.0.2682_offline.exe
            intel_cpp_components_cache_path: C:\Program Files (x86)\Intel\oneAPI\compiler
            prepare_command_for_cache_restore_of_cpp_components: ''
          - os: macOS-latest
            edax-runner_bin_name: edax_runner-mac
            edax_build_command: make build ARCH=x64-modern COMP=icc OS=osx
            edax_bin_name: mEdax
            intel_components_install_script: oneapi-ci/scripts/install_macos.sh
            intel_components_setup_script: |- # https://github.com/oneapi-src/oneapi-ci/blob/master/scripts/build_mac.sh
              source /opt/intel/oneapi/setvars.sh
              cat /opt/intel/oneapi/setvars.sh
            intel_cpp_components: intel.oneapi.mac.cpp-compiler
            hrckit_url: https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
            intel_cpp_components_cache_path: /opt/intel
            prepare_command_for_cache_restore_of_cpp_components: sudo mkdir -p /opt/intel && sudo chown $USER /opt/intel

    steps:
      - uses: actions/checkout@v2

      # https://blog.dantup.com/2019/11/easily-compiling-dart-to-native-executables-for-windows-linux-macos-with-github-actions/
      - uses: cedx/setup-dart@v2
        with:
            architecture: x64
            release-channel: beta
      - name: install dependencies
        run: pub get

      - name: cache edax-reversi
        uses: actions/cache@v2
        with:
          path: edax-reversi
          key: ${{ env.cache_version }}-${{ runner.os }}-edax-reversi-${{ hashFiles('scripts/build_edax.sh') }}

      # setup Intel Compiler icc
      - uses: actions/checkout@v2
        with:
          repository: oneapi-src/oneapi-ci
          path: oneapi-ci
      - name: prepare for cache restore
        run: ${{ matrix.prepare_command_for_cache_restore_of_cpp_components }}
      - name: cache intel components
        id: cache-intel-components
        uses: actions/cache@v2
        with:
          path: ${{ matrix.intel_cpp_components_cache_path }}
          key: ${{ env.cache_version }}-${{ matrix.os }}-install-${{ matrix.hrckit_url }}-${{ matrix.intel_cpp_components }}
      - name: install intel components
        if: steps.cache-intel-components.outputs.cache-hit != 'true'
        run: ${{ matrix.intel_components_install_script }} ${{ matrix.hrckit_url }} ${{ matrix.intel_cpp_components }}
      - name: setup intel components (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: ${{ matrix.intel_components_setup_script }}
      - name: setup intel components (Mac, Linux)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: ${{ matrix.intel_components_setup_script }}

      - name: build edax-reversi
        env:
          dst: ${{ env.OUTPUT_DIR }}
          bin_name: ${{ matrix.edax-runner_bin_name }}
          edax_build_command: ${{ matrix.edax_build_command }}
          edax_bin_name: ${{ matrix.edax_bin_name }}
        run: sh scripts/build_edax.sh

      - name: build edax-runner
        run: dart2native bin/edax_runner.dart -v -o ${{ env.OUTPUT_DIR }}/${{ matrix.edax-runner_bin_name }}

      - name: output build info
        env:
          build_info_txt: ${{ env.OUTPUT_DIR }}/env.txt
        run: |-
          touch ${{ env.build_info_txt }}
          icc -dumpversion >> ${{ env.build_info_txt }}

      # See: https://github.com/actions/upload-artifact/issues/38
      # Workaround: https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: tar files
        run: mkdir -p dst && tar -cvf dst/${{ runner.os }}.tar ${{ env.OUTPUT_DIR }}

      - uses: actions/upload-artifact@v2
        with:
          name: edax_runner-releases
          path: dst
